@model List<InventoryClient.Models.Product>

@{
    ViewBag.Title = "Product Inventory";
}

<!-- Header with gradient background -->
<div class="header-gradient">
    <div class="container">
        <div class="d-flex justify-content-center align-items-center">
            <h1 class="display-5 fw-bold m-0">Product Inventory</h1>
        </div>
    </div>
</div>

<!-- Search box with icon -->
<div class="row mb-4">
    <div class="col-md-6 mx-auto">
        <div class="input-group shadow-sm">
            <span class="input-group-text bg-white border-end-0">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" id="searchInput" class="form-control border-start-0 ps-0"
                   placeholder="Search products by name..." aria-label="Search" />
        </div>
        <div class="text-center mt-2">
            <div id="searchSpinner" class="spinner-border spinner-border-sm text-primary"
                 role="status" style="display: none;">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
</div>

<!-- Results count and Add Item button -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <p class="text-muted mb-0" id="resultCount">Showing <span class="fw-bold">@Model.Count</span> products</p>
    <div>
        @Html.ActionLink("+ Add New Product", "Create", null, new { @class = "btn btn-primary add-btn shadow-sm" })
    </div>
</div>

<!-- Product table with card styling -->
<div class="card shadow-sm">
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th class="ps-4">ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th class="text-center">Quantity</th>
                        <th class="text-end">Price</th>
                        <th>Created At</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="productList">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="ps-4">@item.id</td>
                            <td class="fw-semibold">@item.name</td>
                            <td>
                                <span class="text-truncate d-inline-block" style="max-width: 250px;">
                                    @item.description
                                </span>
                            </td>
                            <td class="text-center">
                                <span class="badge @(item.quantity > 10 ? "bg-success" : (item.quantity > 0 ? "bg-warning" : "bg-danger")) rounded-pill">
                                    @item.quantity
                                </span>
                            </td>
                            <td class="text-end fw-bold">@item.price.ToString("C")</td>
                            <td>@item.created_at.ToString("MMM d, yyyy")</td>
                            <td>
                                <div class="d-flex justify-content-center gap-2">
                                    @Html.ActionLink("Edit", "Edit", new { id = item.id }, new { @class = "btn btn-outline-primary btn-sm" })
                                    @using (Html.BeginForm("Delete", "Products", new { id = item.id }, FormMethod.Post, false, new { @class = "d-inline", onsubmit = "return confirm('Are you sure you want to delete this product?');" }))
                                    {
                                        <button type="submit" class="btn btn-outline-danger btn-sm">Delete</button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let searchTimer;

        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');

            searchInput.addEventListener('input', function() {
                // Clear any existing timer
                clearTimeout(searchTimer);

                // Show loading spinner
                document.getElementById('searchSpinner').style.display = 'inline-block';

                // Set a small delay to avoid too many requests while typing
                searchTimer = setTimeout(function() {
                    const searchTerm = searchInput.value;

                    // Make the AJAX request
                    fetch(`/Products/Search?searchTerm=${encodeURIComponent(searchTerm)}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.text();
                        })
                        .then(data => {
                            // Update the table body with search results
                            document.getElementById('productList').innerHTML = data;

                            // Update the count of results
                            const rowCount = document.getElementById('productList').getElementsByTagName('tr').length;
                            document.getElementById('resultCount').innerHTML =
                                `Showing <span class="fw-bold">${rowCount}</span> products`;

                            document.getElementById('searchSpinner').style.display = 'none';
                        })
                        .catch(error => {
                            console.error('Error fetching search results:', error);
                            document.getElementById('searchSpinner').style.display = 'none';
                        });
                }, 300); // 300ms delay
            });
        });
    </script>
}